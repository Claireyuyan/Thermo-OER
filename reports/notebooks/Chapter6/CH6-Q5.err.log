Traceback (most recent call last):
  File "C:\Users\ckeulen\anaconda3\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\ckeulen\anaconda3\Lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ckeulen\anaconda3\Lib\site-packages\jupyter_core\utils\__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ckeulen\anaconda3\Lib\asyncio\base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\ckeulen\anaconda3\Lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "C:\Users\ckeulen\anaconda3\Lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\ckeulen\anaconda3\Lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# import the libraries we'll need
import CoolProp.CoolProp as CP
import numpy as np
import matplotlib.pyplot as plt

# define variables
fluid = "water"  # define the fluid or material of interest, for full list see CP.Fluidslist()
T_min = CP.PropsSI("Tmin", fluid)  # triple-point temp for the fluid in K
T_crit = CP.PropsSI("Tcrit", fluid)   #critical point temperature in K
T_vals = np.linspace(T_min, T_crit, 1000)  # define an array of values for temperature

Q = 1  # define the fluid quality as 1, which is 100% vapor

entropy = [CP.PropsSI("S", "T", T, "Q", Q, fluid)/1000 for T in T_vals]  # call for entropy values using CoolProp

plt.plot(entropy, T_vals, "-b", label="Saturation Line")  # plot pressure vs enthalpy

Q = 0  # define the fluid quality as 0, which is 100% liquid

entropy = [CP.PropsSI("S", "T", T, "Q", Q, fluid)/1000 for T in T_vals]  # call for entropy values using CoolProp

plt.plot(entropy, T_vals, "-b")  # plot pressure vs enthalpy

# constant pressure
P = 5e+6   #constant pressure in Pa
T_max = 650 + 273.15   #max temperature for plotting

T_vals = np.linspace(T_min, T_max, 1000)  # define an array of values for temperature

entropy = [CP.PropsSI("S", "T", T, "P", P, fluid)/1000 for T in T_vals]  # call for entropy values using CoolProp

plt.plot(entropy, T_vals, "--r", label="P=5 MPa")  # plot pressure vs enthalpy

#constant volume
v = 1  #constant volume m3/kg
D = 1 / v   #density kg/m3

entropy = [CP.PropsSI("S", "T", T, "D", D, fluid)/1000 for T in T_vals]  # call for entropy values using CoolProp

plt.plot(entropy, T_vals, "--g", label="v=1 m3/kg")  # plot pressure vs enthalpy

plt.ylabel("Temperature [K]")  # give y axis a label
plt.xlabel("Entropy [kJ/kgK]")  # give x axis a label
plt.grid()
plt.legend()

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[1], line 2[0m
[0;32m      1[0m [38;5;66;03m# import the libraries we'll need[39;00m
[1;32m----> 2[0m [38;5;28;01mimport[39;00m [38;5;21;01mCoolProp[39;00m[38;5;21;01m.[39;00m[38;5;21;01mCoolProp[39;00m [38;5;28;01mas[39;00m [38;5;21;01mCP[39;00m
[0;32m      3[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[0;32m      4[0m [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m [38;5;28;01mas[39;00m [38;5;21;01mplt[39;00m

[1;31mModuleNotFoundError[0m: No module named 'CoolProp'

